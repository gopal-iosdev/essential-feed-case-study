
name: Deploy

# Controls when the action will run. 
# Triggers the workflow on push events but only for the master branch.
on:
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-deploy"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: macos-15

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4

    - name: Install provisioning profile
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_KEY }}" --output .github/deployment/EssentialAppDistribution.mobileprovision .github/deployment/profile.mobileprovision.gpg
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp .github/deployment/EssentialAppDistribution.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    - name: Install keychain certificate
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_KEY }}" --output .github/deployment/certificate.p12 .github/deployment/certificate.p12.gpg
        security create-keychain -p "" build.keychain
        security import .github/deployment/certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -A
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain

    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_16.2.app

    - name: Xcode version
      run: /usr/bin/xcodebuild -version

    - name: Fetch current project version
      run: |
        cd EssentialApp
        currentProjectVersion=$(xcrun agvtool what-version -terse)
        echo "Current project version for EssentialApp and EssentialAppTests: $currentProjectVersion"

    - name: Increment project version
      run: |
        cd EssentialApp
        xcrun agvtool next-version -all
        updatedProjectVersion=$(xcrun agvtool what-version -terse)
        echo "Updated project version for EssentialApp and EssentialAppTests: $updatedProjectVersion"

    - name: Commit and Push Changes
      run: |
        cd EssentialApp
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add .
        git commit -m "Increment project version to $updatedProjectVersion"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build
      run: xcodebuild clean archive -sdk iphoneos -workspace EssentialApp.xcworkspace -configuration "Release" -scheme "EssentialApp" -derivedDataPath "DerivedData" -archivePath "DerivedData/Archive/EssentialApp.xcarchive"

    - name: Export
      run: xcodebuild -exportArchive -archivePath DerivedData/Archive/EssentialApp.xcarchive -exportOptionsPlist .github/deployment/ExportOptions.plist -exportPath DerivedData/ipa

    - name: Deploy
      run: xcrun altool --upload-app --type ios --file "DerivedData/ipa/EssentialApp.ipa" --username "${{ secrets.APPSTORE_USERNAME }}" --password "${{ secrets.APPSTORE_PASSWORD }}" --verbose
