name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install provisioning profile
      run: |
        # Decrypt the provisioning profile
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_KEY }}" --output .github/deployment/Essential_App_Production.mobileprovision .github/deployment/profile.mobileprovision.gpg
        
        # Check if the provisioning profile is decrypted successfully
        if [ -f ".github/deployment/Essential_App_Production.mobileprovision" ]; then
          echo "Provisioning profile decrypted successfully."
        else
          echo "Failed to decrypt the provisioning profile."
          exit 1
        fi
        
        # Create the directory for provisioning profiles if it does not exist
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        
        # Copy the provisioning profile to the appropriate directory
        cp .github/deployment/Essential_App_Production.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

        # Rename the profile to match exactly "Essential App Production"
        mv ~/Library/MobileDevice/Provisioning\ Profiles/Essential_App_Production.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/Essential\ App\ Production.mobileprovision

        # List installed provisioning profiles
        echo "Installed provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

        # Verify if the profile was copied successfully
        if [ -f ~/Library/MobileDevice/Provisioning\ Profiles/Essential\ App\ Production.mobileprovision ]; then
          echo "Provisioning profile copied and renamed successfully."
        else
          echo "Failed to copy and rename the provisioning profile."
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          exit 1
        fi

    - name: Install keychain certificate
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.SECRET_KEY }}" --output .github/deployment/certificate.p12 .github/deployment/certificate.p12.gpg
        security create-keychain -p "" build.keychain
        security import .github/deployment/certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -A
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain

    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.3.app

    - name: Xcode version
      run: /usr/bin/xcodebuild -version

    - name: Set build number
      run: |
        buildNumber=$(($GITHUB_RUN_NUMBER + 1))
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $buildNumber" "EssentialApp/EssentialApp/Info.plist"

    - name: Build
      run: |
        echo "Available provisioning profiles before build:"
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/Essential\ App\ Production.mobileprovision
        
        xcodebuild clean archive -sdk iphoneos -workspace EssentialApp.xcworkspace -configuration "Release" -scheme "EssentialApp" -derivedDataPath "DerivedData" -archivePath "DerivedData/Archive/EssentialApp.xcarchive" CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER="Essential App Production" CODE_SIGN_IDENTITY="iPhone Distribution" -allowProvisioningUpdates

    - name: Export
      run: xcodebuild -exportArchive -archivePath DerivedData/Archive/EssentialApp.xcarchive -exportOptionsPlist .github/deployment/ExportOptions.plist -exportPath DerivedData/ipa

    - name: Deploy
      run: xcrun altool --upload-app --type ios --file "DerivedData/ipa/EssentialApp.ipa" --username "${{ secrets.APPSTORE_USERNAME }}" --password "${{ secrets.APPSTORE_PASSWORD }}" --verbose
