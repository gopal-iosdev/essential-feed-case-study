name: Update PR Checklist and Build

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  update-checklist-and-build:
    runs-on: macos-latest

    steps:
      # Step 1: Checkout Code using actions/checkout@v6
      - name: Checkout code
        uses: actions/checkout@v6

      # Step 2: Check if milestone is set using actions/github-script@v6
      - name: Check if milestone is set
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fetch the pull request details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber,
            });

            // Get the PR body
            let body = pr.body || '';

            // Define the checklist items
            const uncheckedItem = '- [ ] Did you add a milestone?';
            const checkedItem = '- [x] Did you add a milestone?';

            // Check if a milestone is assigned
            const hasMilestone = pr.milestone !== null;

            // Update the PR body
            if (hasMilestone) {
              body = body.replace(uncheckedItem, checkedItem);
            } else {
              body = body.replace(checkedItem, uncheckedItem);
            }

            // Update the PR description
            await github.rest.pulls.update({
              owner,
              repo,
              pull_number: prNumber,
              body: body,
            });

      # Step 3: Install Dependencies (e.g., CocoaPods)
      - name: Install CocoaPods Dependencies
        run: pod install --project-directory=./

      # Step 4: Set Execute Permissions for Build Script
      - name: Set Execute Permissions for Build Script
        run: chmod +x ./scripts/build_all_schemes.sh

      # Step 5: Build All Schemes using build_all_schemes.sh
      - name: Build All Schemes
        id: build_project
        continue-on-error: true  # Continue even if the build fails to update the checklist
        run: |
          set -eo pipefail

          # Install xcpretty if not installed
          if ! command -v xcpretty > /dev/null; then
            sudo gem install xcpretty
          fi

          # Define your schemes or targets
          SCHEMES=("EssentialFeed")

          BUILD_SUCCESS=true

          for SCHEME in "${SCHEMES[@]}"; do
            echo "Building scheme: $SCHEME"
            ./scripts/build_all_schemes.sh "$SCHEME" "YOUR_DEV_TEAM_ID" "$GITHUB_WORKSPACE" "iPhone 15 Pro"
            if [ $? -ne 0 ]; then
              BUILD_SUCCESS=false
              echo "Build failed for scheme: $SCHEME"
              break
            fi
          done

          echo "BUILD_SUCCESS=$BUILD_SUCCESS" >> $GITHUB_ENV

      # Step 6: Update PR Checklist with Build Status using actions/github-script@v6
      - name: Update PR Checklist with Build Status
        if: always()  # Ensure this step runs even if previous steps fail
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fetch the updated PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber,
            });

            let body = pr.body || '';

            // Define the checklist items
            const uncheckedItem = '- [ ] Does your code build for all of the debug targets?';
            const checkedItem = '- [x] Does your code build for all of the debug targets?';

            // Get BUILD_SUCCESS from environment
            const buildSuccess = process.env.BUILD_SUCCESS === 'true';

            // Update the PR body based on build success
            if (buildSuccess) {
              body = body.replace(uncheckedItem, checkedItem);
            } else {
              body = body.replace(checkedItem, uncheckedItem);
            }

            // Update the PR description
            await github.rest.pulls.update({
              owner,
              repo,
              pull_number: prNumber,
              body: body,
            });
